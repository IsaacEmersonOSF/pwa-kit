"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPublicProductListsBySearchTerm = exports.getPublicProductList = exports.getProductListItem = exports.getExternalProfile = exports.getCustomerProductLists = exports.getCustomerProductListItem = exports.getCustomerProductList = exports.getCustomerPaymentInstrument = exports.getCustomerOrders = exports.getCustomerBaskets = exports.getCustomerAddress = exports.getCustomer = void 0;
var _utils = require("../utils");
/*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

// We must use a client with no parameters in order to have required/optional match the API spec

// This is defined here, rather than `types.ts`, because it relies on `Client` and `QueryKeys`,
// and making those generic would add too much complexity.

const getExternalProfile = exports.getExternalProfile = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'externalId', 'authenticationProviderId', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/external-profile'],
  queryKey: params => [...getExternalProfile.path(params), getExternalProfile.parameters(params)]
};
const getCustomer = exports.getCustomer = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'customerId', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId],
  queryKey: params => [...getCustomer.path(params), getCustomer.parameters(params)]
};
const getCustomerAddress = exports.getCustomerAddress = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'customerId', 'addressName', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/addresses/', params.addressName],
  queryKey: params => [...getCustomerAddress.path(params), getCustomerAddress.parameters(params)]
};
const getCustomerBaskets = exports.getCustomerBaskets = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'customerId', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/baskets'],
  queryKey: params => [...getCustomerBaskets.path(params), getCustomerBaskets.parameters(params)]
};
const getCustomerOrders = exports.getCustomerOrders = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'customerId', 'crossSites', 'from', 'until', 'status', 'siteId', 'offset', 'limit']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/orders'],
  queryKey: params => [...getCustomerOrders.path(params), getCustomerOrders.parameters(params)]
};
const getCustomerPaymentInstrument = exports.getCustomerPaymentInstrument = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'customerId', 'paymentInstrumentId', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/payment-instruments/', params.paymentInstrumentId],
  queryKey: params => [...getCustomerPaymentInstrument.path(params), getCustomerPaymentInstrument.parameters(params)]
};
const getCustomerProductLists = exports.getCustomerProductLists = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'customerId', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/product-lists'],
  queryKey: params => [...getCustomerProductLists.path(params), getCustomerProductLists.parameters(params)]
};
const getCustomerProductList = exports.getCustomerProductList = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'customerId', 'listId', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/product-lists/', params.listId],
  queryKey: params => [...getCustomerProductList.path(params), getCustomerProductList.parameters(params)]
};
const getCustomerProductListItem = exports.getCustomerProductListItem = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'customerId', 'listId', 'itemId', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/customers/', params.customerId, '/product-lists/', params.listId, '/items/', params.itemId],
  queryKey: params => [...getCustomerProductListItem.path(params), getCustomerProductListItem.parameters(params)]
};
const getPublicProductListsBySearchTerm = exports.getPublicProductListsBySearchTerm = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'email', 'firstName', 'lastName', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/product-lists'],
  queryKey: params => [...getPublicProductListsBySearchTerm.path(params), getPublicProductListsBySearchTerm.parameters(params)]
};
const getPublicProductList = exports.getPublicProductList = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'listId', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/product-lists/', params.listId],
  queryKey: params => [...getPublicProductList.path(params), getPublicProductList.parameters(params)]
};
const getProductListItem = exports.getProductListItem = {
  parameters: params => (0, _utils.pick)(params, ['organizationId', 'listId', 'itemId', 'siteId']),
  path: params => ['/commerce-sdk-react', '/organizations/', params.organizationId, '/product-lists/', params.listId, '/items/', params.itemId],
  queryKey: params => [...getProductListItem.path(params), getProductListItem.parameters(params)]
};